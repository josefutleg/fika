{"ast":null,"code":"var _jsxFileName = \"/Users/josefutleg/Desktop/projects/fika/fika/client/src/tools/projects.jsx\";\nimport React, { Component } from \"react\";\nimport \"../sidebar/sidebarStyle.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\nimport CreateProject from \"./createProject\";\n\nclass Projects extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isExpanded: false,\n      isActive: false,\n      isQuickSelect: false,\n      options: [{\n        name: \"View Projects\",\n        id: \"000\",\n        isSolid: true\n      }, {\n        name: \"New Project\",\n        id: \"newProject\"\n      }, {\n        name: \"Project 1\",\n        id: \"5e1ea63791789f7bf9ade9fe\"\n      }, {\n        name: \"Project 2\",\n        id: \"5e4ea6579r789f7bf9ade4zv\"\n      }],\n      isMinimized: false\n    };\n\n    this.handleClickOut = e => {\n      this.setState({\n        isExpanded: false\n      });\n      this.setState({\n        isActive: false\n      });\n    };\n\n    this.handleViewProjects = e => {\n      this.props.handleProjects(e);\n      this.setState({\n        isExpanded: false\n      });\n      this.setState({\n        isActive: false\n      });\n    };\n\n    this.handleViewProject = e => {\n      this.props.viewProject(e);\n      this.setState({\n        isExpanded: false\n      });\n      this.setState({\n        isActive: false\n      });\n    };\n\n    this.handleNewProject = e => {\n      this.setState({\n        isQuickSelect: true\n      });\n      this.setState({\n        isExpanded: false\n      });\n      this.setState({\n        isMinimized: false\n      });\n    };\n\n    this.handleClose = e => {\n      this.setState({\n        isQuickSelect: false\n      });\n      console.log(\"changed\");\n    };\n\n    this.handleClick = e => {\n      e.persist();\n      let loadFunc = e.target.attributes.dataid.value;\n      console.log(loadFunc);\n\n      if (loadFunc == \"new\") {\n        this.handleNewProject();\n      } else this.handleViewProject(e);\n    };\n\n    this.handleMinimize = e => {\n      if (this.state.isMinimized === false) this.setState({\n        isMinimized: true\n      });else this.setState({\n        isMinimized: false\n      });\n    };\n\n    this.expand = e => {\n      if (this.node.contains(e.target)) {\n        if (this.state.isExpanded === false) {\n          this.setState({\n            isExpanded: true\n          });\n          this.setState({\n            isActive: true\n          });\n        }\n\n        return;\n      } else this.handleClickOut();\n    };\n  }\n\n  //need a componentdidmount once mongo is connected. all options except view all will be database saved. use 'id' key to store mongo ._id to send request to db\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.expand, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.expand, false);\n  }\n\n  render() {\n    const openDivStyle = {\n      width: \"200px\",\n      float: \"left\",\n      overflow: \"hidden\" // backgroundColor: \"lightgreen\"\n\n    };\n    const closeDivStyle = {\n      width: \"0px\",\n      display: \"none\"\n    };\n    const activeDivStyle = {\n      backgroundColor: \"orangered\"\n    };\n    const inactiveDivStyle = {\n      backgroundColor: \"#222222\"\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"option\",\n      ref: node => this.node = node,\n      onClick: this.expand,\n      style: this.state.isActive ? activeDivStyle : inactiveDivStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"optionIcon\",\n      icon: faProjectDiagram,\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"expandOptions\",\n      style: this.state.isExpanded ? openDivStyle : closeDivStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.state.options.map(x => React.createElement(\"p\", {\n      className: \"expandOption\",\n      key: x.id,\n      dataid: x.id,\n      dataname: x.name,\n      onClick: x.isSolid ? this.handleViewProjects : this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, x.name)))), this.state.isQuickSelect === true && React.createElement(CreateProject, {\n      handleClose: this.handleClose,\n      handleMinimize: this.handleMinimize,\n      isMinimized: this.state.isMinimized,\n      userInfo: this.props.userInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Projects;","map":{"version":3,"sources":["/Users/josefutleg/Desktop/projects/fika/fika/client/src/tools/projects.jsx"],"names":["React","Component","FontAwesomeIcon","faProjectDiagram","CreateProject","Projects","state","isExpanded","isActive","isQuickSelect","options","name","id","isSolid","isMinimized","handleClickOut","e","setState","handleViewProjects","props","handleProjects","handleViewProject","viewProject","handleNewProject","handleClose","console","log","handleClick","persist","loadFunc","target","attributes","dataid","value","handleMinimize","expand","node","contains","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","openDivStyle","width","float","overflow","closeDivStyle","display","activeDivStyle","backgroundColor","inactiveDivStyle","map","x","userInfo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../sidebar/sidebarStyle.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\nimport CreateProject from \"./createProject\";\n\nclass Projects extends Component {\n  state = {\n    isExpanded: false,\n    isActive: false,\n    isQuickSelect: false,\n    options: [\n      {\n        name: \"View Projects\",\n        id: \"000\",\n        isSolid: true\n      },\n      {\n        name: \"New Project\", id: \"newProject\"\n      },\n      {\n        name: \"Project 1\", id: \"5e1ea63791789f7bf9ade9fe\"\n      },\n      {\n        name: \"Project 2\", id: \"5e4ea6579r789f7bf9ade4zv\"\n      }\n    ],\n    isMinimized: false,\n  };\n\n  //need a componentdidmount once mongo is connected. all options except view all will be database saved. use 'id' key to store mongo ._id to send request to db\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.expand, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.expand, false);\n  }\n  handleClickOut = e => {\n    this.setState({ isExpanded: false });\n    this.setState({ isActive: false });\n  };\n\n  handleViewProjects = e => {\n    this.props.handleProjects(e);\n    this.setState({ isExpanded: false });\n    this.setState({ isActive: false });\n  };\n\n  handleViewProject = e => {\n    this.props.viewProject(e);\n    this.setState({ isExpanded: false });\n    this.setState({ isActive: false });\n  };\n\n  handleNewProject = e => {\n    this.setState({ isQuickSelect: true });\n    this.setState({ isExpanded: false });\n    this.setState({ isMinimized: false });\n  };\n\n  handleClose = e => {\n    this.setState({ isQuickSelect: false });\n    console.log(\"changed\");\n  };\n\n  handleClick = e => {\n    e.persist();\n    let loadFunc = e.target.attributes.dataid.value\n    console.log(loadFunc);\n    if (loadFunc == \"new\") {\n      this.handleNewProject();\n    } else this.handleViewProject(e);\n  }\n\n  handleMinimize = e => {\n    if (this.state.isMinimized === false) this.setState({ isMinimized: true });\n    else this.setState({ isMinimized: false });\n  };\n\n  expand = e => {\n    if (this.node.contains(e.target)) {\n      if (this.state.isExpanded === false) {\n        this.setState({ isExpanded: true });\n        this.setState({ isActive: true });\n      }\n      return;\n    } else this.handleClickOut();\n  };\n\n  render() {\n    const openDivStyle = {\n      width: \"200px\",\n      float: \"left\",\n      overflow: \"hidden\"\n      // backgroundColor: \"lightgreen\"\n    };\n    const closeDivStyle = {\n      width: \"0px\",\n      display: \"none\"\n    };\n    const activeDivStyle = {\n      backgroundColor: \"orangered\"\n    };\n    const inactiveDivStyle = {\n      backgroundColor: \"#222222\"\n    };\n    return (\n      <React.Fragment>\n        <div\n          className=\"option\"\n          ref={node => (this.node = node)}\n          onClick={this.expand}\n          style={this.state.isActive ? activeDivStyle : inactiveDivStyle}\n        >\n          <FontAwesomeIcon\n            className=\"optionIcon\"\n            icon={faProjectDiagram}\n            size=\"lg\"\n          />\n          <div\n            className=\"expandOptions\"\n            style={this.state.isExpanded ? openDivStyle : closeDivStyle}\n          >\n            {this.state.options.map(x => (\n              <p\n                className=\"expandOption\"\n                key={x.id}\n                dataid={x.id}\n                dataname={x.name}\n                onClick={\n                  x.isSolid ? this.handleViewProjects : this.handleClick\n                }\n              >\n                {x.name}\n              </p>\n            ))}\n          </div>\n        </div>\n        {this.state.isQuickSelect === true && (\n          <CreateProject\n            handleClose={this.handleClose}\n            handleMinimize={this.handleMinimize}\n            isMinimized={this.state.isMinimized}\n            userInfo={this.props.userInfo}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}