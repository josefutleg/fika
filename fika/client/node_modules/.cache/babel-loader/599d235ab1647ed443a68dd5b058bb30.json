{"ast":null,"code":"var _jsxFileName = \"/Users/josefutleg/Desktop/code/app/fika/fika/client/src/tools/projects.jsx\";\nimport React, { Component } from \"react\";\nimport \"../sidebar/sidebarStyle.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Projects extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isExpanded: false,\n      options: [{\n        option: \"View All\",\n        id: \"000\",\n        func: this.props.handleProjects,\n        isSolid: true\n      }, {\n        option: \"Project 1\",\n        id: \"001\",\n        func: this.props.viewProject\n      }, {\n        option: \"Project 2\",\n        id: \"002\",\n        func: this.props.viewProject\n      }, {\n        option: \"Project 3\",\n        id: \"003\",\n        func: this.props.viewProject\n      }]\n    };\n\n    this.expand = e => {\n      if (this.state.isExpanded === false) this.setState({\n        isExpanded: true\n      });else this.setState({\n        isExpanded: false\n      });\n    };\n  }\n\n  //   window.addEventListener('click', function(event){\n  //     var box = document.getElementById('box1');\n  //     if (event.target != box && event.target.parentNode != box){\n  //         box.style.display = 'none';\n  //     }\n  // });\n  //need a componentdidmount once mongo is connected. all options except view all will be database saved. use 'id' key to store mongo ._id to send request to db\n  componentDidMount() {\n    window.addEventListener(\"click\", function () {\n      this.setState({\n        isExpanded: false\n      });\n    });\n  }\n\n  render() {\n    const openDivStyle = {\n      width: \"100px\",\n      float: \"left\",\n      overflow: \"hidden\"\n    };\n    const closeDivStyle = {\n      width: \"0px\",\n      display: \"none\"\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"optionIcon\",\n      icon: faProjectDiagram,\n      size: \"lg\",\n      onClick: this.expand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"expandOptions\",\n      style: this.state.isExpanded ? openDivStyle : closeDivStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.state.options.map(x => React.createElement(\"p\", {\n      className: \"expandOption\",\n      key: x.id,\n      datavalue: x.id,\n      dataname: x.option,\n      onClick: x.isSolid ? this.props.handleProjects : this.props.viewProject,\n      onMouseUp: () => this.setState({\n        isExpanded: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, x.option)))));\n  }\n\n}\n\nexport default Projects;","map":{"version":3,"sources":["/Users/josefutleg/Desktop/code/app/fika/fika/client/src/tools/projects.jsx"],"names":["React","Component","FontAwesomeIcon","faProjectDiagram","Projects","state","isExpanded","options","option","id","func","props","handleProjects","isSolid","viewProject","expand","e","setState","componentDidMount","window","addEventListener","render","openDivStyle","width","float","overflow","closeDivStyle","display","map","x"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../sidebar/sidebarStyle.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Projects extends Component {\n  state = {\n    isExpanded: false,\n    options: [\n      {\n        option: \"View All\",\n        id: \"000\",\n        func: this.props.handleProjects,\n        isSolid: true\n      },\n      { option: \"Project 1\", id: \"001\", func: this.props.viewProject },\n      { option: \"Project 2\", id: \"002\", func: this.props.viewProject },\n      { option: \"Project 3\", id: \"003\", func: this.props.viewProject }\n    ]\n  };\n\n  //   window.addEventListener('click', function(event){\n  //     var box = document.getElementById('box1');\n  //     if (event.target != box && event.target.parentNode != box){\n  //         box.style.display = 'none';\n  //     }\n  // });\n\n  //need a componentdidmount once mongo is connected. all options except view all will be database saved. use 'id' key to store mongo ._id to send request to db\n\n  componentDidMount() {\n    window.addEventListener(\"click\", function() {\n      this.setState({ isExpanded: false });\n    });\n  }\n\n  expand = e => {\n    if (this.state.isExpanded === false) this.setState({ isExpanded: true });\n    else this.setState({ isExpanded: false });\n  };\n\n  render() {\n    const openDivStyle = {\n      width: \"100px\",\n      float: \"left\",\n      overflow: \"hidden\"\n    };\n    const closeDivStyle = {\n      width: \"0px\",\n      display: \"none\"\n    };\n    return (\n      <React.Fragment>\n        <div className=\"option\">\n          <FontAwesomeIcon\n            className=\"optionIcon\"\n            icon={faProjectDiagram}\n            size=\"lg\"\n            onClick={this.expand}\n          />\n          <div\n            className=\"expandOptions\"\n            style={this.state.isExpanded ? openDivStyle : closeDivStyle}\n          >\n            {this.state.options.map(x => (\n              <p\n                className=\"expandOption\"\n                key={x.id}\n                datavalue={x.id}\n                dataname={x.option}\n                onClick={\n                  x.isSolid ? this.props.handleProjects : this.props.viewProject\n                }\n                onMouseUp={() => this.setState({ isExpanded: false })}\n              >\n                {x.option}\n              </p>\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}