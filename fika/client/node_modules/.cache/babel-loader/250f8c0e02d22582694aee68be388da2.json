{"ast":null,"code":"var _jsxFileName = \"/Users/josefutleg/Desktop/code/app/fika/fika/client/src/tools/projects.jsx\";\nimport React, { Component } from \"react\";\nimport \"../sidebar/sidebarStyle.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Projects extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false,\n      options: [{\n        option: \"View All\",\n        id: \"000\",\n        func: this.props.handleProjects,\n        isSolid: true\n      }, {\n        option: \"Project 1\",\n        id: \"001\",\n        func: this.props.viewProject\n      }, {\n        option: \"Project 2\",\n        id: \"002\",\n        func: this.props.viewProject\n      }, {\n        option: \"Project 3\",\n        id: \"003\",\n        func: this.props.viewProject\n      }]\n    };\n  }\n\n  //need a componentdidmount once mongo is connected. all options except view all will be database saved. use 'id' key to store mongo ._id to send request to db\n  render() {\n    const openDivStyle = {\n      width: \"100px\",\n      float: \"left\",\n      overflow: \"hidden\"\n    };\n    const closeDivStyle = {\n      width: \"0px\",\n      display: \"none\"\n    };\n    const openIconStyle = {\n      float: \"left\",\n      marginLeft: \"5%\"\n    };\n    const closeIconStyle = {\n      textAlign: \"center\"\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: this.props.isExpanded ? openDivStyle : closeDivStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.state.options.map(x => React.createElement(\"p\", {\n      className: \"expandOption\",\n      key: x.id,\n      datavalue: x.id,\n      dataname: x.option,\n      onClick: x.isSolid ? this.props.handleProjects : this.props.viewProject,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, x.option))));\n  }\n\n}\n\nexport default Projects;","map":{"version":3,"sources":["/Users/josefutleg/Desktop/code/app/fika/fika/client/src/tools/projects.jsx"],"names":["React","Component","FontAwesomeIcon","faProjectDiagram","Projects","state","isOpen","options","option","id","func","props","handleProjects","isSolid","viewProject","render","openDivStyle","width","float","overflow","closeDivStyle","display","openIconStyle","marginLeft","closeIconStyle","textAlign","isExpanded","map","x"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,6BAAP;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,gBAAT,QAAiC,mCAAjC;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BI,KAD+B,GACvB;AACNC,MAAAA,MAAM,EAAE,KADF;AAENC,MAAAA,OAAO,EAAE,CACP;AACEC,QAAAA,MAAM,EAAE,UADV;AAEEC,QAAAA,EAAE,EAAE,KAFN;AAGEC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,cAHnB;AAIEC,QAAAA,OAAO,EAAE;AAJX,OADO,EAOP;AAAEL,QAAAA,MAAM,EAAE,WAAV;AAAuBC,QAAAA,EAAE,EAAE,KAA3B;AAAkCC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWG;AAAnD,OAPO,EAQP;AAAEN,QAAAA,MAAM,EAAE,WAAV;AAAuBC,QAAAA,EAAE,EAAE,KAA3B;AAAkCC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWG;AAAnD,OARO,EASP;AAAEN,QAAAA,MAAM,EAAE,WAAV;AAAuBC,QAAAA,EAAE,EAAE,KAA3B;AAAkCC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWG;AAAnD,OATO;AAFH,KADuB;AAAA;;AAgB/B;AAEAC,EAAAA,MAAM,GAAG;AACP,UAAMC,YAAY,GAAG;AACnBC,MAAAA,KAAK,EAAE,OADY;AAEnBC,MAAAA,KAAK,EAAE,MAFY;AAGnBC,MAAAA,QAAQ,EAAE;AAHS,KAArB;AAKA,UAAMC,aAAa,GAAG;AACpBH,MAAAA,KAAK,EAAE,KADa;AAEpBI,MAAAA,OAAO,EAAE;AAFW,KAAtB;AAIA,UAAMC,aAAa,GAAG;AACpBJ,MAAAA,KAAK,EAAE,MADa;AAEpBK,MAAAA,UAAU,EAAE;AAFQ,KAAtB;AAIA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,SAAS,EAAE;AADU,KAAvB;AAGA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAWe,UAAX,GAAwBV,YAAxB,GAAuCI,aAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKf,KAAL,CAAWE,OAAX,CAAmBoB,GAAnB,CAAuBC,CAAC,IACvB;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,GAAG,EAAEA,CAAC,CAACnB,EAFT;AAGE,MAAA,SAAS,EAAEmB,CAAC,CAACnB,EAHf;AAIE,MAAA,QAAQ,EAAEmB,CAAC,CAACpB,MAJd;AAKE,MAAA,OAAO,EACLoB,CAAC,CAACf,OAAF,GAAY,KAAKF,KAAL,CAAWC,cAAvB,GAAwC,KAAKD,KAAL,CAAWG,WANvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASGc,CAAC,CAACpB,MATL,CADD,CADH,CADF,CADF;AAmBD;;AAtD8B;;AAyDjC,eAAeJ,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"../sidebar/sidebarStyle.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Projects extends Component {\n  state = {\n    isOpen: false,\n    options: [\n      {\n        option: \"View All\",\n        id: \"000\",\n        func: this.props.handleProjects,\n        isSolid: true\n      },\n      { option: \"Project 1\", id: \"001\", func: this.props.viewProject },\n      { option: \"Project 2\", id: \"002\", func: this.props.viewProject },\n      { option: \"Project 3\", id: \"003\", func: this.props.viewProject }\n    ]\n  };\n\n  //need a componentdidmount once mongo is connected. all options except view all will be database saved. use 'id' key to store mongo ._id to send request to db\n\n  render() {\n    const openDivStyle = {\n      width: \"100px\",\n      float: \"left\",\n      overflow: \"hidden\"\n    };\n    const closeDivStyle = {\n      width: \"0px\",\n      display: \"none\"\n    };\n    const openIconStyle = {\n      float: \"left\",\n      marginLeft: \"5%\"\n    };\n    const closeIconStyle = {\n      textAlign: \"center\"\n    };\n    return (\n      <React.Fragment>\n        <div style={this.props.isExpanded ? openDivStyle : closeDivStyle}>\n          {this.state.options.map(x => (\n            <p\n              className=\"expandOption\"\n              key={x.id}\n              datavalue={x.id}\n              dataname={x.option}\n              onClick={\n                x.isSolid ? this.props.handleProjects : this.props.viewProject\n              }\n            >\n              {x.option}\n            </p>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}